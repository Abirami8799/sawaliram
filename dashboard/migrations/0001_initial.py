# Generated by Django 2.1.5 on 2019-01-29 06:53

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('organisation', models.CharField(default='', max_length=200)),
                ('access_requested', models.CharField(default='', max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': (('can_submit_questions', 'Can submit questions'), ('can_view_questions', 'Can view questions'), ('can_translate_content', 'Can translate questions & answers'), ('can_edit_content', 'Can fix typos and grammars in questions & answers'), ('can_remove_duplicates', 'Can remove duplicate questions'), ('can_answer_questions', 'Can answer questions & review answers'), ('can_approve_user_access', 'Can allow or deny access to other users')),
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school', models.CharField(max_length=100)),
                ('area', models.CharField(max_length=100)),
                ('state', models.CharField(default='', max_length=100)),
                ('student_name', models.CharField(max_length=100)),
                ('student_gender', models.CharField(default='', max_length=100)),
                ('student_class', models.CharField(default='', max_length=100)),
                ('question_text', models.CharField(max_length=500)),
                ('question_text_english', models.CharField(default='', max_length=500)),
                ('question_topic', models.CharField(max_length=100)),
                ('question_format', models.CharField(max_length=100)),
                ('question_language', models.CharField(max_length=100)),
                ('contributor', models.CharField(max_length=100)),
                ('contributor_role', models.CharField(max_length=100)),
                ('context', models.CharField(max_length=100)),
                ('local_language', models.CharField(max_length=100)),
                ('medium_language', models.CharField(max_length=100)),
                ('curriculum_followed', models.CharField(default='', max_length=100)),
                ('published', models.BooleanField(default=False)),
                ('published_source', models.CharField(default='', max_length=200)),
                ('published_date', models.DateField(default=datetime.date.today)),
                ('question_asked_on', models.DateField(null=True)),
                ('notes', models.CharField(default='', max_length=1000)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'question',
            },
        ),
    ]
